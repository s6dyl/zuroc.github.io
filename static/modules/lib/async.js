define('lib/async', function(require, exports, module){ // Generated by CoffeeScript 1.8.0
var $$, fancybox, func_by_name, require_loading, url_name_func,
  __slice = [].slice;

fancybox = $.fancybox;

require_loading = function(url, callback) {
  NProgress.inc();
  return require.async(url, function() {
    require(url);
    NProgress.done();
    return callback();
  }, function() {
    NProgress.done();
    return $.modal_alert('<h1><p>出错了 !</p><p><a href=".">点此这里</a> 刷新页面试试？</p></h1>');
  });
};

url_name_func = function(name) {
  var i, t, url, _, _i, _len, _ref;
  _ = name.split(".", 2);
  if (_.length === 2) {
    url = _[0], name = _[1];
  } else {
    url = name;
    name = "";
  }
  _ = url.split("/");
  t = jQuery;
  _ref = _.slice(0, -1);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    t = (t[i] = t[i] || {});
  }
  return [url, name];
};

func_by_name = function(name) {
  var i, t, _i, _len, _ref;
  t = jQuery;
  _ref = name.split("/");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    t = t != null ? t[i] : void 0;
  }
  return t;
};

window.$$ = $$ = function() {
  var action, func, name, params, url, _ref;
  name = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  _ref = url_name_func(name), url = _ref[0], name = _ref[1];
  if (name) {
    name = "/" + name;
  }
  action = url + name;
  func = func_by_name(action);
  if (func) {
    return func.apply(func, params);
  } else {
    return require_loading(url, function() {
      var t;
      t = func_by_name(action);
      return t.apply(t, params);
    });
  }
};

$$.on = function(event, css, js) {
  var name, url, _, _event, _ref;
  _ref = url_name_func(js), url = _ref[0], name = _ref[1];
  _event = event + "." + $.uid();
  _ = $(document);
  return _.on(_event, css, function() {
    var self;
    _.off(_event);
    self = this;
    return require_loading(url, function() {
      var t;
      t = func_by_name(name);
      t.apply(self);
      return _.on(event, css, t);
    });
  });
};

window.$import = function(path) {
  return function(funcname, kwds, callback) {
    var suffix, _callback;
    if ($.isFunction(kwds)) {
      callback = kwds;
      kwds = 0;
    }
    if (callback) {
      _callback = callback;
      callback = function(r) {
        if ($.isArray(r)) {
          return _callback.apply(_callback, r);
        } else {
          return _callback(r);
        }
      };
    }
    if (path.indexOf('//' + CONST.HOST) === 0 || (path.charAt(0) === '/' && path.charAt(1) !== "/")) {
      suffix = "";
    } else {
      suffix = "?callback=?";
    }
    return $.postJSON1("" + path + "." + funcname + suffix, kwds, callback);
  };
};

//# sourceMappingURL=async.js.map
 
});